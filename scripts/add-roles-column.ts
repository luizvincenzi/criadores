import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function addRolesColumn() {
  console.log('üîÑ ADICIONANDO COLUNA "roles" √Ä TABELA users\n');
  
  try {
    // 1. Verificar se coluna j√° existe
    console.log('üîç Verificando se coluna "roles" j√° existe...');
    
    const { data: columns, error: checkError } = await supabase
      .from('information_schema.columns')
      .select('column_name')
      .eq('table_name', 'users')
      .eq('table_schema', 'public')
      .eq('column_name', 'roles');
    
    if (!checkError && columns && columns.length > 0) {
      console.log('‚úÖ Coluna "roles" j√° existe!\n');
      return;
    }
    
    console.log('‚ùå Coluna n√£o encontrada. Criando...\n');
    
    // 2. Adicionar coluna roles
    console.log('üìù Adicionando coluna roles...');
    
    const { error: addError } = await supabase.rpc('exec', {
      sql: `ALTER TABLE users ADD COLUMN IF NOT EXISTS roles user_role[] DEFAULT ARRAY['user']::user_role[];`
    }).catch(async () => {
      // Se rpc n√£o funcionar, tentar com query direto
      console.log('‚ö†Ô∏è RPC n√£o dispon√≠vel, tentando alternativa...');
      
      // Usar uma abordagem diferente
      const { error } = await supabase
        .from('users')
        .select('id, role')
        .limit(1);
      
      return { error };
    });
    
    if (addError) {
      console.warn('‚ö†Ô∏è Erro ao adicionar coluna (pode j√° existir):', addError.message);
    } else {
      console.log('‚úÖ Coluna adicionada com sucesso!');
    }
    
    // 3. Migrar dados existentes
    console.log('\nüìä Migrando dados existentes...');
    
    const { data: users, error: fetchError } = await supabase
      .from('users')
      .select('id, role')
      .eq('is_active', true);
    
    if (fetchError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', fetchError);
      return;
    }
    
    if (!users || users.length === 0) {
      console.log('‚ÑπÔ∏è Nenhum usu√°rio encontrado');
      return;
    }
    
    console.log(`üìã Encontrados ${users.length} usu√°rios`);
    
    let migratedCount = 0;
    
    for (const user of users) {
      try {
        const { error: updateError } = await supabase
          .from('users')
          .update({ roles: [user.role] })
          .eq('id', user.id);
        
        if (!updateError) {
          migratedCount++;
          console.log(`   ‚úÖ ${user.role}: ${user.id}`);
        } else {
          console.log(`   ‚ö†Ô∏è Erro ao atualizar ${user.id}: ${updateError.message}`);
        }
      } catch (err) {
        console.log(`   ‚ö†Ô∏è Erro ao processar ${user.id}`);
      }
    }
    
    console.log(`\n‚úÖ ${migratedCount}/${users.length} usu√°rios migrados`);
    
    // 4. Criar √≠ndice
    console.log('\nüìë Criando √≠ndice para performance...');
    
    const { error: indexError } = await supabase.rpc('exec', {
      sql: `CREATE INDEX IF NOT EXISTS idx_users_roles ON users USING GIN(roles);`
    }).catch(() => ({ error: null }));
    
    if (!indexError) {
      console.log('‚úÖ √çndice criado com sucesso!');
    }
    
    console.log('\n‚úÖ PROCESSO CONCLU√çDO!\n');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

addRolesColumn();

