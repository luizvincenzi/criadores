import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

async function diagnoseBusiness() {
  console.log('üîç DIAGN√ìSTICO DE INCONSIST√äNCIA DE DADOS - AUTO POSTO BELA SU√ç√áA\n');
  
  try {
    const baseUrl = 'http://localhost:3000';
    
    // 1. Buscar dados da API de neg√≥cios
    console.log('üìä 1. BUSCANDO DADOS DA API DE NEG√ìCIOS...');
    const businessResponse = await fetch(`${baseUrl}/api/supabase/businesses`);
    const businessResult = await businessResponse.json();
    
    if (!businessResult.success) {
      console.log('‚ùå Erro na API de neg√≥cios:', businessResult.error);
      return;
    }
    
    console.log(`‚úÖ ${businessResult.data.length} neg√≥cios encontrados na API`);
    
    // 2. Procurar "Auto Posto Bela Su√≠√ßa"
    console.log('\nüîç 2. PROCURANDO "AUTO POSTO BELA SU√ç√áA"...');
    
    const autoPostoBusiness = businessResult.data.find((business: any) => 
      business.nome?.toLowerCase().includes('auto posto') ||
      business.nome?.toLowerCase().includes('bela su√≠√ßa') ||
      business.nome?.toLowerCase().includes('bela suica')
    );
    
    if (autoPostoBusiness) {
      console.log('‚úÖ ENCONTRADO! Dados do Auto Posto Bela Su√≠√ßa:');
      console.log('üìã ESTRUTURA COMPLETA DOS DADOS:');
      console.log(JSON.stringify(autoPostoBusiness, null, 2));
      
      console.log('\nüìù CAMPOS MAPEADOS PARA O MODAL:');
      console.log(`   - ID: ${autoPostoBusiness.id}`);
      console.log(`   - Nome (business.nome): ${autoPostoBusiness.nome}`);
      console.log(`   - Nome (business.name): ${autoPostoBusiness.name || 'N/A'}`);
      console.log(`   - Nome (business.businessName): ${autoPostoBusiness.businessName || 'N/A'}`);
      console.log(`   - Categoria: ${autoPostoBusiness.categoria}`);
      console.log(`   - Plano Atual: ${autoPostoBusiness.planoAtual}`);
      console.log(`   - Comercial: ${autoPostoBusiness.comercial}`);
      console.log(`   - Nome Respons√°vel: ${autoPostoBusiness.nomeResponsavel}`);
      console.log(`   - Cidade: ${autoPostoBusiness.cidade}`);
      console.log(`   - WhatsApp: ${autoPostoBusiness.whatsappResponsavel}`);
      console.log(`   - Prospec√ß√£o: ${autoPostoBusiness.prospeccao}`);
      console.log(`   - Respons√°vel: ${autoPostoBusiness.responsavel}`);
      console.log(`   - Instagram: ${autoPostoBusiness.instagram}`);
      
    } else {
      console.log('‚ùå Auto Posto Bela Su√≠√ßa N√ÉO ENCONTRADO na API');
      
      console.log('\nüìã NEG√ìCIOS DISPON√çVEIS:');
      businessResult.data.forEach((business: any, index: number) => {
        console.log(`   ${index + 1}. ${business.nome || business.name || 'SEM NOME'} (ID: ${business.id})`);
      });
    }
    
    // 3. Verificar dados diretos do Supabase
    console.log('\nüóÑÔ∏è 3. VERIFICANDO DADOS DIRETOS DO SUPABASE...');
    
    try {
      const { createClient } = await import('@supabase/supabase-js');
      const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
      const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
      
      if (!supabaseUrl || !supabaseKey) {
        console.log('‚ùå Credenciais do Supabase n√£o encontradas');
        return;
      }
      
      const supabase = createClient(supabaseUrl, supabaseKey);
      
      const { data: rawBusinesses, error } = await supabase
        .from('businesses')
        .select('*')
        .eq('organization_id', '00000000-0000-0000-0000-000000000001')
        .eq('is_active', true);
      
      if (error) {
        console.log('‚ùå Erro ao buscar dados diretos:', error);
        return;
      }
      
      console.log(`‚úÖ ${rawBusinesses.length} neg√≥cios encontrados no Supabase direto`);
      
      const autoPostoRaw = rawBusinesses.find((business: any) => 
        business.name?.toLowerCase().includes('auto posto') ||
        business.name?.toLowerCase().includes('bela su√≠√ßa') ||
        business.name?.toLowerCase().includes('bela suica')
      );
      
      if (autoPostoRaw) {
        console.log('‚úÖ DADOS BRUTOS DO SUPABASE:');
        console.log(JSON.stringify(autoPostoRaw, null, 2));
        
        console.log('\nüîÑ MAPEAMENTO DA API:');
        console.log(`   - name (Supabase) ‚Üí nome (API): ${autoPostoRaw.name} ‚Üí ${autoPostoRaw.name}`);
        console.log(`   - tags[0] (Supabase) ‚Üí categoria (API): ${autoPostoRaw.tags?.[0]} ‚Üí ${autoPostoRaw.tags?.[0] || ''}`);
        console.log(`   - custom_fields.plano_atual ‚Üí planoAtual: ${autoPostoRaw.custom_fields?.plano_atual || ''}`);
        console.log(`   - contact_info.primary_contact ‚Üí nomeResponsavel: ${autoPostoRaw.contact_info?.primary_contact || ''}`);
        console.log(`   - address.city ‚Üí cidade: ${autoPostoRaw.address?.city || ''}`);
        console.log(`   - contact_info.whatsapp ‚Üí whatsappResponsavel: ${autoPostoRaw.contact_info?.whatsapp || ''}`);
        console.log(`   - status ‚Üí prospeccao: ${autoPostoRaw.status}`);
        
      } else {
        console.log('‚ùå Auto Posto Bela Su√≠√ßa N√ÉO ENCONTRADO no Supabase direto');
        
        console.log('\nüìã NEG√ìCIOS NO SUPABASE:');
        rawBusinesses.forEach((business: any, index: number) => {
          console.log(`   ${index + 1}. ${business.name || 'SEM NOME'} (ID: ${business.id})`);
        });
      }
      
    } catch (supabaseError) {
      console.log('‚ùå Erro ao conectar com Supabase:', supabaseError);
    }
    
    // 4. Verificar mapeamento no modal
    console.log('\nüéØ 4. VERIFICANDO MAPEAMENTO NO MODAL...');
    
    console.log('üìù MAPEAMENTO ATUAL NO BusinessModalNew.tsx:');
    console.log('   businessName: business.name || business.businessName || ""');
    console.log('   category: business.categoria || ""');
    console.log('   currentPlan: business.plano || business.currentPlan || ""');
    console.log('   comercial: business.comercial || ""');
    console.log('   nomeResponsavel: business.nomeResponsavel || business.responsavel || ""');
    console.log('   cidade: business.cidade || ""');
    console.log('   whatsappResponsavel: business.whatsappResponsavel || business.whatsapp || ""');
    console.log('   prospeccao: business.prospeccao || business.status || ""');
    
    // 5. Verificar se o problema est√° na p√°gina de neg√≥cios
    console.log('\nüìÑ 5. VERIFICANDO P√ÅGINA DE NEG√ìCIOS...');
    
    console.log('üìù DISPLAY NA P√ÅGINA (linha 255):');
    console.log('   {business.nome || business.name || "Sem Nome"}');
    
    console.log('\nüìù PASSAGEM PARA O MODAL (linha 331):');
    console.log('   onClick={() => handleOpenDetails(business)}');
    console.log('   Onde business √© o objeto completo da API');
    
    // 6. An√°lise final
    console.log('\nüéØ 6. AN√ÅLISE DO PROBLEMA...');
    
    if (autoPostoBusiness) {
      console.log('‚úÖ DADOS ENCONTRADOS - Analisando inconsist√™ncia...');
      
      const modalBusinessName = autoPostoBusiness.name || autoPostoBusiness.businessName || '';
      const pageBusinessName = autoPostoBusiness.nome || autoPostoBusiness.name || 'Sem Nome';
      
      console.log('üìä COMPARA√á√ÉO:');
      console.log(`   - Nome na p√°gina: "${pageBusinessName}"`);
      console.log(`   - Nome no modal: "${modalBusinessName}"`);
      
      if (modalBusinessName !== pageBusinessName) {
        console.log('‚ùå INCONSIST√äNCIA ENCONTRADA!');
        console.log('üîß PROBLEMA: Mapeamento diferente entre p√°gina e modal');
        console.log('üí° SOLU√á√ÉO: Ajustar mapeamento no modal para usar business.nome');
      } else {
        console.log('‚úÖ Nomes consistentes - problema pode ser em outro lugar');
      }
      
      // Verificar se o nome est√° vazio
      if (!modalBusinessName || modalBusinessName.trim() === '') {
        console.log('‚ùå PROBLEMA: Nome do neg√≥cio est√° vazio no modal');
        console.log('üîß CAUSA: business.name e business.businessName est√£o vazios');
        console.log('üí° SOLU√á√ÉO: Usar business.nome como fallback');
      }
      
    } else {
      console.log('‚ùå DADOS N√ÉO ENCONTRADOS - Verificar se o neg√≥cio existe');
    }
    
    console.log('\nüéØ RESUMO DO DIAGN√ìSTICO:');
    console.log('1. ‚úÖ API de neg√≥cios funcionando');
    console.log('2. üîç Verifica√ß√£o de dados espec√≠ficos');
    console.log('3. üóÑÔ∏è Dados diretos do Supabase');
    console.log('4. üéØ Mapeamento do modal');
    console.log('5. üìÑ Display na p√°gina');
    console.log('6. üîß An√°lise de inconsist√™ncias');
    
  } catch (error) {
    console.error('‚ùå Erro no diagn√≥stico:', error);
  }
}

if (require.main === module) {
  diagnoseBusiness()
    .then(() => {
      console.log('\nüéâ Diagn√≥stico conclu√≠do');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Diagn√≥stico falhou:', error);
      process.exit(1);
    });
}

export { diagnoseBusiness };
