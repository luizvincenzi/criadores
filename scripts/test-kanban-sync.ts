import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env.local' });

async function testKanbanSync() {
  try {
    console.log('üß™ Testando sincroniza√ß√£o completa do Kanban...');

    const baseUrl = 'http://localhost:3000';

    // 1. Buscar neg√≥cios atuais
    console.log('üìä Buscando neg√≥cios atuais...');
    
    const dealsResponse = await fetch(`${baseUrl}/api/deals`);
    if (!dealsResponse.ok) {
      console.error('‚ùå Erro ao buscar neg√≥cios');
      return false;
    }

    const dealsData = await dealsResponse.json();
    console.log(`‚úÖ ${dealsData.total} neg√≥cios encontrados`);

    if (dealsData.deals.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum neg√≥cio encontrado para teste');
      return false;
    }

    const testDeal = dealsData.deals[0];
    console.log(`üéØ Testando com neg√≥cio: ${testDeal.business_name}`);
    console.log(`üìç Etapa atual: ${testDeal.stage}`);
    console.log(`üìÖ Desde: ${new Date(testDeal.current_stage_since).toLocaleString('pt-BR')}`);

    // 2. Testar mudan√ßa de etapa
    const stages = [
      'Leads pr√≥prios frios',
      'Leads pr√≥prios quentes', 
      'Indica√ß√µes',
      'Enviado proposta',
      'Marcado reuni√£o',
      'Reuni√£o realizada',
      'Follow up'
    ];

    const currentStageIndex = stages.indexOf(testDeal.stage);
    const nextStageIndex = (currentStageIndex + 1) % stages.length;
    const newStage = stages[nextStageIndex];

    console.log(`üîÑ Testando mudan√ßa: ${testDeal.stage} ‚Üí ${newStage}`);

    // 3. Executar mudan√ßa de etapa
    const updateResponse = await fetch(`${baseUrl}/api/deals`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        id: testDeal.id,
        stage: newStage,
        previous_stage: testDeal.stage
      })
    });

    if (!updateResponse.ok) {
      console.error('‚ùå Erro ao atualizar etapa');
      return false;
    }

    const updateResult = await updateResponse.json();
    console.log('‚úÖ Etapa atualizada no servidor:');
    console.log(`  - Mensagem: ${updateResult.message}`);
    console.log(`  - Nova etapa: ${updateResult.deal.stage}`);
    console.log(`  - Atualizado em: ${new Date(updateResult.deal.current_stage_since).toLocaleString('pt-BR')}`);
    
    if (updateResult.tracking) {
      console.log('üìä Tracking:');
      console.log(`  - Etapa anterior: ${updateResult.tracking.previous_stage}`);
      console.log(`  - Nova etapa: ${updateResult.tracking.new_stage}`);
      console.log(`  - Tempo na etapa anterior: ${updateResult.tracking.time_in_previous_stage_days || 0} dias`);
    }

    // 4. Verificar persist√™ncia - buscar novamente
    console.log('üîç Verificando persist√™ncia...');
    
    await new Promise(resolve => setTimeout(resolve, 1000)); // Aguardar 1 segundo
    
    const verifyResponse = await fetch(`${baseUrl}/api/deals`);
    if (verifyResponse.ok) {
      const verifyData = await verifyResponse.json();
      const updatedDeal = verifyData.deals.find((d: any) => d.id === testDeal.id);
      
      if (updatedDeal) {
        console.log('‚úÖ Persist√™ncia verificada:');
        console.log(`  - Etapa atual: ${updatedDeal.stage}`);
        console.log(`  - Desde: ${new Date(updatedDeal.current_stage_since).toLocaleString('pt-BR')}`);
        
        if (updatedDeal.stage === newStage) {
          console.log('üéâ Sincroniza√ß√£o funcionando perfeitamente!');
        } else {
          console.log('‚ö†Ô∏è  Etapa n√£o foi persistida corretamente');
        }
      } else {
        console.log('‚ùå Neg√≥cio n√£o encontrado ap√≥s atualiza√ß√£o');
      }
    }

    // 5. Testar m√∫ltiplas mudan√ßas r√°pidas
    console.log('‚ö° Testando m√∫ltiplas mudan√ßas r√°pidas...');
    
    const rapidChanges = [
      stages[(nextStageIndex + 1) % stages.length],
      stages[(nextStageIndex + 2) % stages.length],
      testDeal.stage // Voltar ao original
    ];

    for (let i = 0; i < rapidChanges.length; i++) {
      const targetStage = rapidChanges[i];
      console.log(`üîÑ Mudan√ßa ${i + 1}: ‚Üí ${targetStage}`);
      
      const rapidResponse = await fetch(`${baseUrl}/api/deals`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: testDeal.id,
          stage: targetStage,
          previous_stage: i === 0 ? newStage : rapidChanges[i - 1]
        })
      });

      if (rapidResponse.ok) {
        const rapidResult = await rapidResponse.json();
        console.log(`  ‚úÖ ${rapidResult.message}`);
      } else {
        console.log(`  ‚ùå Erro na mudan√ßa ${i + 1}`);
      }
      
      // Pequena pausa entre mudan√ßas
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    // 6. Verifica√ß√£o final
    console.log('üèÅ Verifica√ß√£o final...');
    
    const finalResponse = await fetch(`${baseUrl}/api/deals`);
    if (finalResponse.ok) {
      const finalData = await finalResponse.json();
      const finalDeal = finalData.deals.find((d: any) => d.id === testDeal.id);
      
      if (finalDeal) {
        console.log('üìä Estado final:');
        console.log(`  - Etapa: ${finalDeal.stage}`);
        console.log(`  - Desde: ${new Date(finalDeal.current_stage_since).toLocaleString('pt-BR')}`);
        console.log(`  - Valor: R$ ${finalDeal.estimated_value}`);
        console.log(`  - Prioridade: ${finalDeal.priority}`);
      }
    }

    // 7. Resumo dos testes
    console.log('\nüéâ Teste de sincroniza√ß√£o do Kanban conclu√≠do!');
    console.log('\nüìã Funcionalidades testadas:');
    console.log('‚úÖ Busca de neg√≥cios');
    console.log('‚úÖ Atualiza√ß√£o de etapa');
    console.log('‚úÖ Tracking de tempo');
    console.log('‚úÖ Persist√™ncia no banco');
    console.log('‚úÖ M√∫ltiplas mudan√ßas r√°pidas');
    console.log('‚úÖ Verifica√ß√£o de consist√™ncia');

    console.log('\nüöÄ Sistema pronto para uso:');
    console.log('1. Acesse http://localhost:3000/deals');
    console.log('2. Arraste neg√≥cios entre colunas');
    console.log('3. Veja notifica√ß√µes de sucesso/erro');
    console.log('4. Atualize a p√°gina - mudan√ßas persistem');
    console.log('5. Clique em "Ver Detalhes" para tracking');

    return true;

  } catch (error) {
    console.error('‚ùå Erro geral nos testes:', error);
    return false;
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  testKanbanSync()
    .then((success) => {
      process.exit(success ? 0 : 1);
    });
}

export { testKanbanSync };
