#!/usr/bin/env tsx

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function analyzeUserAccess() {
  console.log('üîç AN√ÅLISE COMPLETA DO SISTEMA DE ACESSO');
  console.log('======================================\n');

  // 1. Analisar usu√°rio ops
  console.log('1Ô∏è‚É£ AN√ÅLISE DO USU√ÅRIO OPS');
  console.log('-------------------------');
  
  try {
    const { data: opsUser, error } = await supabase
      .from('users')
      .select(`
        *,
        organization:organizations(*)
      `)
      .eq('email', 'criadores.ops@gmail.com')
      .single();

    if (error || !opsUser) {
      console.log('‚ùå Usu√°rio ops n√£o encontrado');
      return;
    }

    console.log('üë§ Dados do usu√°rio ops:');
    console.log(`   üìß Email: ${opsUser.email}`);
    console.log(`   üìù Nome: ${opsUser.full_name}`);
    console.log(`   üëî Role: ${opsUser.role}`);
    console.log(`   ‚úÖ Ativo: ${opsUser.is_active}`);
    console.log(`   üè¢ Organiza√ß√£o: ${opsUser.organization?.name}`);
    console.log(`   üîê Permiss√µes:`, JSON.stringify(opsUser.permissions, null, 2));

  } catch (error) {
    console.log('‚ùå Erro ao analisar usu√°rio ops:', error);
  }

  // 2. Verificar sistema de controle de acesso
  console.log('\n2Ô∏è‚É£ SISTEMA DE CONTROLE DE ACESSO');
  console.log('--------------------------------');
  
  console.log('üìã Estrutura atual do sistema:');
  console.log('   ‚Ä¢ AuthGuard: Verifica apenas se est√° logado');
  console.log('   ‚Ä¢ RLS Policies: Controle no banco de dados');
  console.log('   ‚Ä¢ Role-based: admin, manager, user, viewer');
  console.log('   ‚Ä¢ Permissions: JSON com permiss√µes espec√≠ficas');

  // 3. Verificar se h√° controle de acesso nas p√°ginas
  console.log('\n3Ô∏è‚É£ CONTROLE DE ACESSO NAS P√ÅGINAS');
  console.log('---------------------------------');
  
  console.log('üìÑ P√°ginas analisadas:');
  console.log('   ‚Ä¢ Dashboard: ‚ùå Sem verifica√ß√£o de role');
  console.log('   ‚Ä¢ Neg√≥cios: ‚ùå Sem verifica√ß√£o de role');
  console.log('   ‚Ä¢ Empresas: ‚ùå Sem verifica√ß√£o de role');
  console.log('   ‚Ä¢ Criadores: ‚ùå Sem verifica√ß√£o de role');
  console.log('   ‚Ä¢ Campanhas: ‚ùå Sem verifica√ß√£o de role');
  
  console.log('\n‚ö†Ô∏è  PROBLEMA IDENTIFICADO:');
  console.log('   ‚Ä¢ AuthGuard s√≥ verifica se est√° logado');
  console.log('   ‚Ä¢ N√£o h√° verifica√ß√£o de role nas p√°ginas');
  console.log('   ‚Ä¢ Qualquer usu√°rio logado tem acesso total');

  // 4. Verificar roles dispon√≠veis
  console.log('\n4Ô∏è‚É£ ROLES E PERMISS√ïES NO SISTEMA');
  console.log('--------------------------------');
  
  try {
    const { data: allUsers, error } = await supabase
      .from('users')
      .select('email, full_name, role, permissions, is_active')
      .eq('is_active', true);

    if (error) {
      console.log('‚ùå Erro ao buscar usu√°rios:', error);
    } else {
      console.log('üë• Usu√°rios ativos no sistema:');
      allUsers?.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.full_name} (${user.email})`);
        console.log(`      üëî Role: ${user.role}`);
        console.log(`      üîê Tem permiss√µes: ${user.permissions ? 'Sim' : 'N√£o'}`);
      });
    }

  } catch (error) {
    console.log('‚ùå Erro ao listar usu√°rios:', error);
  }

  // 5. Verificar RLS policies
  console.log('\n5Ô∏è‚É£ ROW LEVEL SECURITY (RLS)');
  console.log('---------------------------');
  
  console.log('üõ°Ô∏è Pol√≠ticas RLS configuradas:');
  console.log('   ‚Ä¢ businesses: ‚úÖ Baseado em organiza√ß√£o e role');
  console.log('   ‚Ä¢ creators: ‚úÖ Baseado em organiza√ß√£o e role');
  console.log('   ‚Ä¢ campaigns: ‚úÖ Baseado em organiza√ß√£o e role');
  console.log('   ‚Ä¢ users: ‚úÖ Baseado em organiza√ß√£o e role');
  
  console.log('\nüìù Como funciona:');
  console.log('   ‚Ä¢ Admin/Manager: Acesso total na organiza√ß√£o');
  console.log('   ‚Ä¢ User: Acesso baseado em permiss√µes espec√≠ficas');
  console.log('   ‚Ä¢ Viewer: Apenas leitura');

  // 6. Recomenda√ß√µes
  console.log('\n6Ô∏è‚É£ RECOMENDA√á√ïES DE SEGURAN√áA');
  console.log('-----------------------------');
  
  console.log('üîß Para implementar controle adequado:');
  console.log('');
  console.log('1Ô∏è‚É£ ATUALIZAR AUTHGUARD:');
  console.log('   ‚Ä¢ Verificar role al√©m de autentica√ß√£o');
  console.log('   ‚Ä¢ Implementar verifica√ß√£o por p√°gina');
  console.log('   ‚Ä¢ Bloquear acesso baseado em permiss√µes');
  console.log('');
  console.log('2Ô∏è‚É£ CRIAR COMPONENTE DE PERMISS√ÉO:');
  console.log('   ‚Ä¢ PermissionGuard para recursos espec√≠ficos');
  console.log('   ‚Ä¢ Verificar permiss√µes antes de renderizar');
  console.log('   ‚Ä¢ Esconder bot√µes/a√ß√µes n√£o permitidas');
  console.log('');
  console.log('3Ô∏è‚É£ DEFINIR PERMISS√ïES POR ROLE:');
  console.log('   ‚Ä¢ Admin: Acesso total');
  console.log('   ‚Ä¢ Manager: Gest√£o de neg√≥cios e campanhas');
  console.log('   ‚Ä¢ User: Acesso limitado baseado em permiss√µes');
  console.log('   ‚Ä¢ Viewer: Apenas visualiza√ß√£o');
}

async function showCurrentIssue() {
  console.log('\nüö® SITUA√á√ÉO ATUAL');
  console.log('=================');
  
  console.log('‚ùå PROBLEMA:');
  console.log('   ‚Ä¢ Usu√°rio "ops" com role "user" tem acesso total');
  console.log('   ‚Ä¢ Sistema n√£o verifica permiss√µes no frontend');
  console.log('   ‚Ä¢ AuthGuard s√≥ verifica se est√° logado');
  console.log('');
  
  console.log('‚úÖ PROTE√á√ÉO EXISTENTE:');
  console.log('   ‚Ä¢ RLS no banco protege dados por organiza√ß√£o');
  console.log('   ‚Ä¢ APIs podem ter controle de acesso');
  console.log('   ‚Ä¢ Audit logs registram todas as a√ß√µes');
  console.log('');
  
  console.log('üîß SOLU√á√ÉO NECESS√ÅRIA:');
  console.log('   ‚Ä¢ Implementar verifica√ß√£o de role no frontend');
  console.log('   ‚Ä¢ Criar componente PermissionGuard');
  console.log('   ‚Ä¢ Definir permiss√µes espec√≠ficas por usu√°rio');
  console.log('   ‚Ä¢ Restringir acesso baseado em role');
}

async function main() {
  console.log('üéØ OBJETIVO: Analisar por que usu√°rio "ops" tem acesso total\n');
  
  await analyzeUserAccess();
  await showCurrentIssue();
  
  console.log('\n‚úÖ AN√ÅLISE CONCLU√çDA!');
  console.log('');
  console.log('üìã RESUMO:');
  console.log('‚Ä¢ O sistema tem estrutura de permiss√µes no banco');
  console.log('‚Ä¢ Mas n√£o h√° verifica√ß√£o no frontend');
  console.log('‚Ä¢ AuthGuard s√≥ verifica autentica√ß√£o, n√£o autoriza√ß√£o');
  console.log('‚Ä¢ RLS protege dados, mas n√£o interface');
  console.log('');
  console.log('üí° PR√ìXIMO PASSO: Implementar controle de acesso no frontend');
}

if (require.main === module) {
  main().catch(console.error);
}
