import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://ecbhcalmulaiszslwhqz.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVjYmhjYWxtdWxhaXN6c2x3aHF6Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjU4MDI1NiwiZXhwIjoyMDY4MTU2MjU2fQ.uAZ2E-hQAQZJ4W3FIuPJ4PJAbOM9SCN2Ns5-GScrCDs';

// Cliente com service role para opera√ß√µes administrativas
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

const DEFAULT_ORG_ID = '00000000-0000-0000-0000-000000000001';
const CLIENT_BUSINESS_ID = '00000000-0000-0000-0000-000000000002';

// Usu√°rios para criar na plataforma crIAdores
const platformUsers = [
  {
    email: 'luizvincenzi@gmail.com',
    password: 'criadores2024!',
    full_name: 'Luiz Vincenzi',
    role: 'admin',
    business_id: null, // Admin pode acessar tudo
    creator_id: null
  },
  {
    email: 'pgabrieldavila@gmail.com', 
    password: 'criadores2024!',
    full_name: 'Pedro Gabriel Davila',
    role: 'business',
    business_id: CLIENT_BUSINESS_ID,
    creator_id: null
  },
  {
    email: 'marloncpascoal@gmail.com',
    password: 'criadores2024!', 
    full_name: 'Marlon Pascoal',
    role: 'business',
    business_id: CLIENT_BUSINESS_ID,
    creator_id: null
  }
];

async function createPlatformUsers() {
  console.log('üöÄ [crIAdores] Criando usu√°rios da plataforma...\n');

  for (const userData of platformUsers) {
    console.log(`üë§ Processando usu√°rio: ${userData.email}`);
    
    try {
      // 1. Criar usu√°rio no Supabase Auth
      console.log('  üîê Criando no Supabase Auth...');
      
      const { data: authUser, error: authError } = await supabase.auth.admin.createUser({
        email: userData.email,
        password: userData.password,
        email_confirm: true, // Confirmar email automaticamente
        user_metadata: {
          full_name: userData.full_name,
          role: userData.role
        }
      });

      if (authError) {
        if (authError.message.includes('already registered')) {
          console.log('  ‚ö†Ô∏è Usu√°rio j√° existe no Auth, atualizando...');
          
          // Tentar atualizar a senha
          const { error: updateError } = await supabase.auth.admin.updateUserById(
            authUser?.user?.id || '', 
            { password: userData.password }
          );
          
          if (updateError) {
            console.log('  ‚ùå Erro ao atualizar senha:', updateError.message);
          } else {
            console.log('  ‚úÖ Senha atualizada no Auth');
          }
        } else {
          console.error('  ‚ùå Erro no Auth:', authError.message);
          continue;
        }
      } else {
        console.log('  ‚úÖ Usu√°rio criado no Auth');
      }

      // 2. Verificar se usu√°rio j√° existe na tabela users
      const { data: existingUser } = await supabase
        .from('users')
        .select('*')
        .eq('email', userData.email.toLowerCase())
        .single();

      if (existingUser) {
        console.log('  üìù Atualizando dados na tabela users...');
        
        const { error: updateError } = await supabase
          .from('users')
          .update({
            full_name: userData.full_name,
            role: userData.role,
            business_id: userData.business_id,
            creator_id: userData.creator_id,
            status: 'active',
            permissions: userData.role === 'admin' ? ['all'] : ['read', 'write'],
            is_active: true,
            updated_at: new Date().toISOString()
          })
          .eq('email', userData.email.toLowerCase());

        if (updateError) {
          console.error('  ‚ùå Erro ao atualizar usu√°rio:', updateError.message);
        } else {
          console.log('  ‚úÖ Dados atualizados na tabela users');
        }
      } else {
        console.log('  üìù Criando registro na tabela users...');
        
        const { error: createError } = await supabase
          .from('users')
          .insert({
            organization_id: DEFAULT_ORG_ID,
            email: userData.email.toLowerCase(),
            full_name: userData.full_name,
            role: userData.role,
            business_id: userData.business_id,
            creator_id: userData.creator_id,
            status: 'active',
            permissions: userData.role === 'admin' ? ['all'] : ['read', 'write'],
            is_active: true,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          });

        if (createError) {
          console.error('  ‚ùå Erro ao criar usu√°rio:', createError.message);
        } else {
          console.log('  ‚úÖ Usu√°rio criado na tabela users');
        }
      }

      console.log(`  üìß Email: ${userData.email}`);
      console.log(`  üîê Senha: ${userData.password}`);
      console.log(`  üë§ Nome: ${userData.full_name}`);
      console.log(`  üîë Role: ${userData.role}`);
      console.log(`  üè¢ Business ID: ${userData.business_id || 'N/A'}`);
      console.log('  ‚úÖ Usu√°rio processado com sucesso!\n');

    } catch (error) {
      console.error(`  ‚ùå Erro inesperado para ${userData.email}:`, error);
      console.log('');
    }
  }

  console.log('üéâ [crIAdores] Processo de cria√ß√£o de usu√°rios conclu√≠do!\n');
  
  console.log('üìã RESUMO DOS USU√ÅRIOS CRIADOS:');
  console.log('================================');
  
  for (const user of platformUsers) {
    console.log(`üë§ ${user.full_name}`);
    console.log(`   üìß Email: ${user.email}`);
    console.log(`   üîê Senha: ${user.password}`);
    console.log(`   üîë Role: ${user.role}`);
    console.log(`   üè¢ Business: ${user.business_id ? 'Cliente crIAdores' : 'Todos'}`);
    console.log('');
  }
  
  console.log('üåê TESTE NA PLATAFORMA:');
  console.log('========================');
  console.log('üîó URL Local: http://localhost:3000/login');
  console.log('üîó URL Produ√ß√£o: https://criadores.vercel.app/login');
  console.log('');
  console.log('‚úÖ Todos os usu√°rios podem fazer login com as credenciais acima!');
}

// Executar o script
if (require.main === module) {
  createPlatformUsers()
    .then(() => {
      console.log('üéØ Script executado com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro ao executar script:', error);
      process.exit(1);
    });
}

export { createPlatformUsers };
