import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkBusinessesStructure() {
  console.log('üîç Verificando estrutura da tabela businesses...\n');
  
  try {
    // 1. Buscar um neg√≥cio para ver a estrutura
    const { data: businesses, error: businessesError } = await supabase
      .from('businesses')
      .select('*')
      .limit(3);
    
    if (businessesError) {
      console.error('‚ùå Erro ao buscar neg√≥cios:', businessesError);
      return;
    }
    
    console.log('üìä Estrutura dos neg√≥cios:');
    businesses?.forEach((business, index) => {
      console.log(`\n  Neg√≥cio ${index + 1}:`);
      Object.entries(business).forEach(([key, value]) => {
        console.log(`    ${key}: ${value}`);
      });
    });
    
    // 2. Verificar se existe campo 'name' em vez de 'nome'
    console.log('\nüîç Testando diferentes campos de nome...');
    
    const { data: testName, error: testNameError } = await supabase
      .from('businesses')
      .select('name')
      .limit(1);
    
    if (!testNameError) {
      console.log('‚úÖ Campo "name" existe');
    } else {
      console.log('‚ùå Campo "name" n√£o existe:', testNameError.message);
    }
    
    const { data: testNome, error: testNomeError } = await supabase
      .from('businesses')
      .select('nome')
      .limit(1);
    
    if (!testNomeError) {
      console.log('‚úÖ Campo "nome" existe');
    } else {
      console.log('‚ùå Campo "nome" n√£o existe:', testNomeError.message);
    }
    
    // 3. Buscar com todos os campos poss√≠veis
    console.log('\nüìã Buscando com campos espec√≠ficos...');
    
    const { data: specificFields, error: specificError } = await supabase
      .from('businesses')
      .select('id, name, nome, business_name, title')
      .limit(3);
    
    if (specificError) {
      console.error('‚ùå Erro ao buscar campos espec√≠ficos:', specificError);
    } else {
      console.log('‚úÖ Dados com campos espec√≠ficos:');
      specificFields?.forEach((business, index) => {
        console.log(`\n  Neg√≥cio ${index + 1}:`);
        console.log(`    ID: ${business.id}`);
        console.log(`    name: ${(business as any).name}`);
        console.log(`    nome: ${(business as any).nome}`);
        console.log(`    business_name: ${(business as any).business_name}`);
        console.log(`    title: ${(business as any).title}`);
      });
    }
    
    console.log('\n‚úÖ Verifica√ß√£o da estrutura conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);
  }
}

if (require.main === module) {
  checkBusinessesStructure()
    .then(() => {
      console.log('\nüéâ Verifica√ß√£o finalizada');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Verifica√ß√£o falhou:', error);
      process.exit(1);
    });
}

export { checkBusinessesStructure };
