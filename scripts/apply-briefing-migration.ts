import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

async function applyBriefingMigration() {
  console.log('üîß APLICANDO MIGRA√á√ÉO DE BRIEFING_DETAILS\n');
  
  try {
    const baseUrl = 'http://localhost:3000';
    
    // 1. Verificar se o servidor est√° rodando
    console.log('üåê 1. VERIFICANDO SERVIDOR...');
    
    try {
      const healthCheck = await fetch(`${baseUrl}/api/supabase/campaigns`);
      if (!healthCheck.ok) {
        throw new Error('API n√£o acess√≠vel');
      }
      console.log('‚úÖ Servidor rodando');
    } catch (error) {
      console.log('‚ùå ERRO: Servidor n√£o est√° rodando');
      console.log('üîß SOLU√á√ÉO: Execute "npm run dev" para iniciar o servidor');
      return;
    }
    
    // 2. Tentar criar uma campanha de teste para verificar o erro
    console.log('\nüß™ 2. TESTANDO CRIA√á√ÉO DE CAMPANHA...');
    
    const testCampaignData = {
      business_id: '5032df40-0e0d-4949-8507-804f60000000', // ID de teste
      title: 'Teste Migra√ß√£o - ' + new Date().toISOString().slice(0, 19),
      description: 'Campanha de teste para verificar migra√ß√£o',
      month: 'julho/2025',
      budget: 1000,
      quantidade_criadores: 1,
      objectives: {
        primary: 'Testar migra√ß√£o',
        secondary: [],
        kpis: { reach: 0, engagement: 0, conversions: 0 }
      },
      deliverables: {
        posts: 1,
        stories: 1,
        reels: 1
      },
      briefing_details: {
        formatos: ['Reels'],
        perfil_criador: 'Teste',
        objetivo_detalhado: 'Testar migra√ß√£o',
        comunicacao_secundaria: 'Teste',
        datas_gravacao: {
          data_inicio: '2025-07-20',
          data_fim: '2025-07-25',
          horarios_preferenciais: [],
          observacoes: 'Teste'
        },
        roteiro_video: {
          o_que_falar: 'Teste',
          historia: 'Teste',
          promocao_cta: 'Teste'
        }
      }
    };
    
    const testResponse = await fetch(`${baseUrl}/api/supabase/campaigns`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testCampaignData)
    });
    
    const testResult = await testResponse.json();
    
    if (testResult.success) {
      console.log('‚úÖ Migra√ß√£o j√° aplicada - campanha criada com sucesso!');
      console.log(`üìã ID da campanha: ${testResult.data.campaign.id}`);
      
      // Limpar campanha de teste
      console.log('üóëÔ∏è Removendo campanha de teste...');
      // Nota: Implementar remo√ß√£o se necess√°rio
      
      return;
    } else {
      console.log('‚ùå Erro confirmado:', testResult.error);
      
      if (testResult.error.includes('briefing_details')) {
        console.log('üîç Erro relacionado √† coluna briefing_details confirmado');
      }
    }
    
    // 3. Instru√ß√µes para aplicar a migra√ß√£o
    console.log('\nüìù 3. INSTRU√á√ïES PARA APLICAR A MIGRA√á√ÉO:\n');
    
    console.log('üéØ OP√á√ÉO 1: Via Supabase Dashboard (RECOMENDADO)');
    console.log('1. Acesse: https://supabase.com/dashboard');
    console.log('2. Selecione seu projeto');
    console.log('3. V√° para "SQL Editor"');
    console.log('4. Cole e execute o seguinte SQL:\n');
    
    const migrationSQL = `-- Adicionar coluna briefing_details √† tabela campaigns
ALTER TABLE campaigns 
ADD COLUMN briefing_details JSONB DEFAULT '{
  "formatos": [],
  "perfil_criador": "",
  "objetivo_detalhado": "",
  "comunicacao_secundaria": "",
  "datas_gravacao": {
    "data_inicio": null,
    "data_fim": null,
    "horarios_preferenciais": [],
    "observacoes": ""
  },
  "roteiro_video": {
    "o_que_falar": "",
    "historia": "",
    "promocao_cta": "",
    "tom_comunicacao": "",
    "pontos_obrigatorios": []
  },
  "requisitos_tecnicos": {
    "duracao_video": "",
    "qualidade": "",
    "formato_entrega": "",
    "hashtags_obrigatorias": []
  }
}'::jsonb;

-- Criar √≠ndice para performance
CREATE INDEX idx_campaigns_briefing_details_gin 
ON campaigns USING gin(briefing_details);

-- Verificar se foi criado
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'campaigns' 
AND column_name = 'briefing_details';`;
    
    console.log(migrationSQL);
    
    console.log('\nüéØ OP√á√ÉO 2: Via CLI do Supabase (Alternativa)');
    console.log('1. Execute: npx supabase login');
    console.log('2. Execute: npx supabase link --project-ref SEU_PROJECT_REF');
    console.log('3. Execute: npx supabase db push');
    
    console.log('\nüéØ OP√á√ÉO 3: Tempor√°ria (Sem briefing_details)');
    console.log('Posso modificar a API para funcionar sem a coluna briefing_details');
    console.log('enquanto voc√™ aplica a migra√ß√£o.\n');
    
    // 4. Verificar estrutura atual
    console.log('üîç 4. VERIFICANDO ESTRUTURA ATUAL...');
    
    const campaignsResponse = await fetch(`${baseUrl}/api/supabase/campaigns`);
    const campaignsResult = await campaignsResponse.json();
    
    if (campaignsResult.success && campaignsResult.data.length > 0) {
      const sampleCampaign = campaignsResult.data[0];
      
      console.log('üìä CAMPOS ATUAIS DISPON√çVEIS:');
      const availableFields = Object.keys(sampleCampaign);
      availableFields.forEach(field => {
        const hasField = sampleCampaign[field] !== undefined;
        console.log(`   ${hasField ? '‚úÖ' : '‚ùå'} ${field}`);
      });
      
      const hasBriefingDetails = availableFields.includes('briefing_details') || 
                                availableFields.includes('briefingDetails');
      
      if (!hasBriefingDetails) {
        console.log('\n‚ùå CONFIRMADO: Campo briefing_details n√£o existe');
        console.log('üîß A√á√ÉO NECESS√ÅRIA: Aplicar migra√ß√£o SQL');
      }
    }
    
    // 5. Resultado final
    console.log('\nüèÜ 5. PR√ìXIMOS PASSOS:\n');
    
    console.log('1. üìù APLICAR MIGRA√á√ÉO:');
    console.log('   - Use a OP√á√ÉO 1 (Supabase Dashboard)');
    console.log('   - Cole o SQL fornecido acima');
    console.log('   - Execute a migra√ß√£o');
    
    console.log('\n2. ‚úÖ VERIFICAR RESULTADO:');
    console.log('   - Recarregue a p√°gina de campanhas');
    console.log('   - Teste criar uma nova campanha');
    console.log('   - Verifique se o erro desapareceu');
    
    console.log('\n3. üß™ TESTAR FUNCIONALIDADE:');
    console.log('   - Preencha todos os campos de briefing');
    console.log('   - Selecione formatos m√∫ltiplos');
    console.log('   - Crie a campanha');
    console.log('   - Verifique se os dados s√£o salvos');
    
    console.log('\n‚ö†Ô∏è IMPORTANTE:');
    console.log('Ap√≥s aplicar a migra√ß√£o, todas as funcionalidades de briefing');
    console.log('funcionar√£o perfeitamente. O erro atual √© apenas devido √†');
    console.log('coluna faltante no banco de dados.');
    
  } catch (error) {
    console.error('‚ùå Erro no script:', error);
  }
}

if (require.main === module) {
  applyBriefingMigration()
    .then(() => {
      console.log('\nüéâ Script de migra√ß√£o conclu√≠do');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Script falhou:', error);
      process.exit(1);
    });
}

export { applyBriefingMigration };
