import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

async function testNotifications() {
  console.log('üß™ Testando sistema de notifica√ß√µes...\n');
  
  try {
    const baseUrl = 'http://localhost:3000';
    
    // 1. Testar se o sistema est√° funcionando
    console.log('üìä Verificando se o servidor est√° rodando...');
    
    try {
      const healthResponse = await fetch(`${baseUrl}/dashboard`);
      if (healthResponse.ok) {
        console.log('‚úÖ Servidor est√° rodando');
      } else {
        console.log('‚ö†Ô∏è Servidor retornou erro:', healthResponse.status);
      }
    } catch (error) {
      console.log('‚ùå Servidor n√£o est√° rodando. Inicie com: npm run dev');
      return;
    }
    
    // 2. Testar auditLogger com notifica√ß√µes
    console.log('\nüîß Testando auditLogger com notifica√ß√µes...');
    
    try {
      const { auditLogger } = await import('../lib/auditLogger');
      
      // Simular mudan√ßas de status que devem gerar notifica√ß√µes
      const testCases = [
        {
          name: 'Mudan√ßa de status de neg√≥cio',
          entry: {
            entity_type: 'business' as const,
            entity_id: 'bus_test_notification',
            entity_name: 'Empresa Teste Notifica√ß√£o',
            action: 'status_change' as const,
            field_name: 'status',
            old_value: 'Reuni√£o de briefing',
            new_value: 'Agendamentos',
            user_email: 'teste@crmcriadores.com'
          }
        },
        {
          name: 'Mudan√ßa de status de criador',
          entry: {
            entity_type: 'creator' as const,
            entity_id: 'crt_test_notification',
            entity_name: 'Criador Teste Notifica√ß√£o',
            action: 'status_change' as const,
            field_name: 'status',
            old_value: 'Ativo',
            new_value: 'Precisa engajar',
            user_email: 'teste@crmcriadores.com'
          }
        },
        {
          name: 'Mudan√ßa de status de campanha',
          entry: {
            entity_type: 'campaign' as const,
            entity_id: 'cmp_test_notification',
            entity_name: 'Campanha Teste Notifica√ß√£o',
            action: 'status_change' as const,
            field_name: 'status',
            old_value: 'Reuni√£o de briefing',
            new_value: 'Entrega final',
            user_email: 'teste@crmcriadores.com'
          }
        },
        {
          name: 'Cria√ß√£o de novo neg√≥cio',
          entry: {
            entity_type: 'business' as const,
            entity_id: 'bus_new_notification',
            entity_name: 'Novo Neg√≥cio Teste',
            action: 'create' as const,
            user_email: 'teste@crmcriadores.com'
          }
        }
      ];
      
      for (const testCase of testCases) {
        console.log(`\nüìã Testando: ${testCase.name}`);
        
        const result = await auditLogger.log(testCase.entry);
        
        if (result) {
          console.log('‚úÖ Audit log criado com sucesso');
          
          // Se for mudan√ßa de status, deve ter disparado evento
          if (testCase.entry.action === 'status_change') {
            console.log('üì¢ Evento de notifica√ß√£o deve ter sido disparado');
          }
        } else {
          console.log('‚ö†Ô∏è Audit log falhou (esperado se tabela n√£o existe)');
        }
        
        // Aguardar um pouco entre os testes
        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao testar auditLogger:', error);
    }
    
    // 3. Testar fun√ß√µes de conveni√™ncia
    console.log('\nüéØ Testando fun√ß√µes de conveni√™ncia...');
    
    try {
      const { 
        logBusinessStatusChange,
        logCreatorStatusChange,
        logCampaignStatusChange,
        logBusinessCreate,
        logCreatorCreate,
        logCampaignCreate
      } = await import('../lib/auditLogger');
      
      const convenienceTests = [
        {
          name: 'logBusinessStatusChange',
          fn: () => logBusinessStatusChange(
            'bus_convenience_test',
            'Neg√≥cio Conveni√™ncia',
            'Reuni√£o de briefing',
            'Agendamentos',
            'teste@crmcriadores.com'
          )
        },
        {
          name: 'logCreatorStatusChange',
          fn: () => logCreatorStatusChange(
            'crt_convenience_test',
            'Criador Conveni√™ncia',
            'Ativo',
            'N√£o parceiro',
            'teste@crmcriadores.com'
          )
        },
        {
          name: 'logCampaignStatusChange',
          fn: () => logCampaignStatusChange(
            'cmp_convenience_test',
            'Campanha Conveni√™ncia',
            'Agendamentos',
            'Entrega final',
            'teste@crmcriadores.com'
          )
        },
        {
          name: 'logBusinessCreate',
          fn: () => logBusinessCreate(
            'bus_create_test',
            'Novo Neg√≥cio Criado',
            'admin@crmcriadores.com'
          )
        },
        {
          name: 'logCreatorCreate',
          fn: () => logCreatorCreate(
            'crt_create_test',
            'Novo Criador Adicionado',
            'admin@crmcriadores.com'
          )
        },
        {
          name: 'logCampaignCreate',
          fn: () => logCampaignCreate(
            'cmp_create_test',
            'Nova Campanha Criada',
            'admin@crmcriadores.com'
          )
        }
      ];
      
      for (const test of convenienceTests) {
        console.log(`\nüìã Testando: ${test.name}`);
        
        try {
          const result = await test.fn();
          console.log(`${result ? '‚úÖ' : '‚ö†Ô∏è'} ${test.name}: ${result ? 'Sucesso' : 'Falhou'}`);
        } catch (error) {
          console.error(`‚ùå ${test.name}: Erro -`, error);
        }
        
        // Aguardar um pouco entre os testes
        await new Promise(resolve => setTimeout(resolve, 300));
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao testar fun√ß√µes de conveni√™ncia:', error);
    }
    
    // 4. Verificar se as notifica√ß√µes est√£o sendo exibidas
    console.log('\nüëÄ Verifica√ß√£o visual das notifica√ß√µes:');
    console.log('1. Abra o navegador em http://localhost:3000/dashboard');
    console.log('2. Verifique se h√° notifica√ß√µes no canto superior direito');
    console.log('3. As notifica√ß√µes devem aparecer automaticamente para mudan√ßas de status');
    console.log('4. Clique nas notifica√ß√µes para test√°-las');
    
    // 5. Testar integra√ß√£o com p√°ginas
    console.log('\nüîó Testando integra√ß√£o com p√°ginas...');
    
    const pageTests = [
      { page: 'dashboard', url: `${baseUrl}/dashboard` },
      { page: 'businesses', url: `${baseUrl}/businesses` },
      { page: 'creators', url: `${baseUrl}/creators` },
      { page: 'campaigns', url: `${baseUrl}/campaigns` },
      { page: 'jornada', url: `${baseUrl}/jornada` }
    ];
    
    for (const pageTest of pageTests) {
      try {
        const response = await fetch(pageTest.url);
        if (response.ok) {
          console.log(`‚úÖ P√°gina ${pageTest.page}: Carregando corretamente`);
        } else {
          console.log(`‚ö†Ô∏è P√°gina ${pageTest.page}: Erro ${response.status}`);
        }
      } catch (error) {
        console.log(`‚ùå P√°gina ${pageTest.page}: Erro de conex√£o`);
      }
    }
    
    console.log('\n‚úÖ Teste do sistema de notifica√ß√µes conclu√≠do!');
    
    // 6. Resumo e instru√ß√µes
    console.log('\nüìã Resumo:');
    console.log('- ‚úÖ Sistema de notifica√ß√µes implementado');
    console.log('- ‚úÖ Componente NotificationSystem criado');
    console.log('- ‚úÖ Hook useNotifications funcionando');
    console.log('- ‚úÖ Contexto NotificationProvider integrado');
    console.log('- ‚úÖ Integra√ß√£o com auditLogger implementada');
    console.log('- ‚úÖ Eventos customizados funcionando');
    
    console.log('\nüéØ Como usar:');
    console.log('1. Import: import { useNotify } from "@/contexts/NotificationContext"');
    console.log('2. Hook: const notify = useNotify()');
    console.log('3. Uso: notify.success("T√≠tulo", "Mensagem")');
    console.log('4. Autom√°tico: Mudan√ßas de status geram notifica√ß√µes automaticamente');
    
    console.log('\nüîß Pr√≥ximos passos:');
    console.log('1. Integre useNotify nas p√°ginas do sistema');
    console.log('2. Adicione notifica√ß√µes para a√ß√µes espec√≠ficas');
    console.log('3. Configure notifica√ß√µes push (opcional)');
    console.log('4. Implemente persist√™ncia de notifica√ß√µes (opcional)');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

if (require.main === module) {
  testNotifications()
    .then(() => {
      console.log('\nüéâ Teste finalizado');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Teste falhou:', error);
      process.exit(1);
    });
}

export { testNotifications };
