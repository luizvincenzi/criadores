import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

const DEFAULT_ORG_ID = '00000000-0000-0000-0000-000000000001';

// GET - Buscar usu√°rios
export async function GET(request: NextRequest) {
  try {
    console.log('üîç Buscando usu√°rios...');

    const { data: users, error } = await supabase
      .from('users')
      .select('id, full_name, email, role')
      .eq('organization_id', DEFAULT_ORG_ID)
      .eq('is_active', true)
      .order('role', { ascending: true })
      .order('full_name', { ascending: true });

    if (error) {
      console.error('‚ùå Erro ao buscar usu√°rios:', error);
      return NextResponse.json(
        { success: false, error: 'Erro ao buscar usu√°rios', details: error.message },
        { status: 500 }
      );
    }

    console.log(`‚úÖ ${users?.length || 0} usu√°rios encontrados`);

    return NextResponse.json({
      success: true,
      users: users || [],
      total: users?.length || 0
    });

  } catch (error) {
    console.error('‚ùå Erro interno ao buscar usu√°rios:', error);
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}

// POST - Criar usu√°rio (se necess√°rio no futuro)
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('üìù Criando usu√°rio:', body);

    const { data: user, error } = await supabase
      .from('users')
      .insert([{
        full_name: body.full_name || body.name,
        email: body.email,
        role: body.role || 'user',
        organization_id: body.organization_id,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }])
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', error);
      return NextResponse.json(
        { error: 'Erro ao criar usu√°rio', details: error.message },
        { status: 500 }
      );
    }

    console.log('‚úÖ Usu√°rio criado:', user);

    return NextResponse.json({
      user,
      message: 'Usu√°rio criado com sucesso'
    });

  } catch (error) {
    console.error('‚ùå Erro interno ao criar usu√°rio:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}
